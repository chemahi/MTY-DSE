anova = aov(Torque ~ Herramienta, data=data)
anova(anova)
data$c1 <- rep(c(1, -1, -1, 1, -1 , 1), each = 10)
summary.lm(aov(Torque ~ c1, data))
data$c2 <- rep(c(-2, -2, -2, 4, -2 , 4), each = 10)
summary.lm(aov(Torque ~ c2, data))
mat <- cbind("a"= c(1,-1,-1,1,-1,1),"b"=c(-2,-2,-2,4,-2,4))
contraste <- mat %*% solve(t(mat) %*% mat)
myAOV <- aov(Torque ~ Herramienta, data, contrasts = list(Herramienta = contraste))
summary.lm(myAOV)
Tiempo = c(19, 23, 26, 18, 20, 20, 20, 20, 32, 27, 40, 24, 16, 15, 18, 26, 19, 17)
Circuito <- factor(c(rep("A", 6), rep("B", 6), rep("C", 6)))
data = data.frame(Tiempo, Circuito)
plot(Tiempo ~ Circuito, data=data)
anova(aov(Tiempo ~ Circuito, data))
circuitoc <- subset(data, data[,2] %in% "C")
t.test(circuitoc[,1], conf.level = 0.90)
data$c1 <- rep(c(-1,0,1), each = 6)
data$c2 <- rep(c(1,-2,1), each = 6)
resp <- lm(Tiempo ~ c1 + c2, data)
anova(resp)
confint(resp, level = 0.90)
?confint
Tiempo = c(19, 23, 26, 18, 20, 20, 20, 20, 32, 27, 40, 24, 16, 15, 18, 26, 19, 17)
Circuito <- factor(c(rep("A", 6), rep("B", 6), rep("C", 6)))
data = data.frame(Tiempo, Circuito)
plot(Tiempo ~ Circuito, data=data)
anova(aov(Tiempo ~ Circuito, data))
circuitoc <- subset(data, data[,2] %in% "C")
t.test(circuitoc[,1], conf.level = 0.90)
data$c1 <- rep(c(-1,0,1), each = 6)
data$c2 <- rep(c(1,-2,1), each = 6)
resp <- lm(Tiempo ~ c1 + c2, data)
anova(resp)
confint(resp, level = 0.90)
Tiempo = c(9, 12, 10, 8, 15, 20, 21, 23, 17, 30, 6, 5, 8, 16, 7)
Circuito <- factor(c(rep("1", 5), rep("2", 5), rep("3", 5)))
data = data.frame(Tiempo, Circuito)
plot(Tiempo ~ Circuito, data=data)
anova(aov(Tiempo ~ Circuito, data))
Tiempo = c(19, 23, 26, 18, 20, 20, 20, 20, 32, 27, 40, 24, 16, 15, 18, 26, 19, 17)
Circuito <- factor(c(rep("A", 6), rep("B", 6), rep("C", 6)))
data = data.frame(Tiempo, Circuito)
plot(Tiempo ~ Circuito, data=data)
anova(aov(Tiempo ~ Circuito, data))
circuitoc <- subset(data, data[,2] %in% "C")
t.test(circuitoc[,1], conf.level = 0.90)
data$c1 <- rep(c(-1,0,1), each = 6)
data$c2 <- rep(c(1,-2,1), each = 6)
resp <- lm(Tiempo ~ c1 + c2, data)
anova(resp)
confint(resp, level = 0.90)
vinos <- read.delim("C:/Users/dibujoatm/Dropbox/R/Vinos.txt")
vinos
vinos2 <- stack(vinos)
subject = rep(vinos$juez,4)
vinos2[3] = subject
rm(subject)
colnames(vinos2) = c("calificación", "vino", "juez")
plot(calificación ~ vino + Error(juez/vino), data=vinos2, main="Box-plot para las observaciones", las=2, xlab=" ")
```
Determinar si la evaluación de la calidad es la misma para los 4 vinos.
```{r, echo=FALSE}
aov.out = aov(calificación ~ vino + Error(juez/vino), data=vinos2)
summary(aov.out)
anestesia <- read.delim("C:/Users/t1600/Dropbox/R/Medidasrep.txt")
plot(milisegundos ~ anestesia, data=anestesia, main="Box-plot para las observaciones", las=2, xlab=" ")
vinos <- read.delim("C:/Users/t1600/Dropbox/R/Vinos.txt")
vinos
View(vinos)
vinos <- read.delim("C:/Users/t1600/Dropbox/R/Vinos.txt")
vinos
vinos2 <- stack(vinos)
subject = rep(vinos$juez,4)
vinos2[3] = subject
colnames(vinos2) = c("calificación", "vino", "juez")
plot(calificación ~ vino, data=vinos2, main="Box-plot para las observaciones", las=2, xlab=" ")
aov.out = aov(calificación ~ vino + Error(juez/vino), data=vinos2)
summary(aov.out)
pegamento <- read.table("C:/Users/t1600/Dropbox/R/Pegamento.txt",header = T)
plot(pegamento$Grosor[pegamento$Pegamento == 'T1'], pegamento$Fuerza[pegamento$Pegamento == 'T1'], xlab='Grosor',
ylab='Fuerza', xlim=c(9,17), ylim=c(40,55), pch=3)
points(pegamento$Grosor[pegamento$Pegamento == 'T2'], pegamento$Fuerza[pegamento$Pegamento == 'T2'], pch=4)
points(pegamento$Grosor[pegamento$Pegamento == 'T3'], pegamento$Fuerza[pegamento$Pegamento == 'T3'], pch=5)
points(pegamento$Grosor[pegamento$Pegamento == 'T4'], pegamento$Fuerza[pegamento$Pegamento == 'T4'], pch=6)
results = lm(Fuerza ~ Grosor + Pegamento, data=pegamento)
anova(results)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "b396f787e2d32fa38a1c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req
stop_for_status(req)
stop_for_status(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
github_token
oauth_endpoints("github")
myapp <- oauth_app("github", "b396f787e2d32fa38a1c")
oauth_app
?oauth:app
?oauth_app
myapp <- oauth_app("Getting and Cleaning Data", "b396f787e2d32fa38a1c". "39333d7b99e2787e1b4f25f8733db7c22c782e08")
myapp <- oauth_app("Getting and Cleaning Data", "b396f787e2d32fa38a1c")
myapp <- oauth_app("Getting and Cleaning Data", "b396f787e2d32fa38a1c", secret = "39333d7b99e2787e1b4f25f8733db7c22c782e08")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
clc
clear
?oauth2.0_token
library(httr)
library(httpuv)
?oauth2.0_token
library(httr)
library(httpuv)
myapp <- oauth_app("github", "b396f787e2d32fa38a1c", secret = "39333d7b99e2787e1b4f25f8733db7c22c782e08")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, use_oob = TRUE)
github_token
library(httr)
library(httpuv)
myapp <- oauth_app("github", "b396f787e2d32fa38a1c", secret = "39333d7b99e2787e1b4f25f8733db7c22c782e08")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
clc
clear
library(httr)
library(httpuv)
myapp <- oauth_app("github", "b396f787e2d32fa38a1c", secret = "39333d7b99e2787e1b4f25f8733db7c22c782e08")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
library(httpuv)
myapp <- oauth_app("github", "b396f787e2d32fa38a1c", secret = "39333d7b99e2787e1b4f25f8733db7c22c782e08")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
library(httr)
library(httpuv)
myapp <- oauth_app("github", key = "b396f787e2d32fa38a1c", secret = "39333d7b99e2787e1b4f25f8733db7c22c782e08")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
acs
sqldf("select pwgtp1 from acs where AGEP < 50")
install.packges("sqldf")
install.packages("sqldf")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
length(unique(acs$AGEP))
length(sqldf("select distinct pwgtp1 from acs"))
length(sqldf("select distinct AGEP from acs"))
sqldf("select distinct AGEP from acs")
length(sqldf("select distinct AGEP from acs"))
sqldf("select AGEP where unique from acs")
library(XML)
url <- http://biostat.jhsph.edu/~jleek/contact.html
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(url, useInternalNodes=T)
html <- htmlTreeParse(url)
html
hurl <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(hurl)
htmlCode <- readLines(con)
close(con)
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
read.fwf()
read.fwf(https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for)
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
?fwf
?read.fwf
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", 5)
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", 1)
data <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", header=T)
head(data)
dim(data)
df <- read.fwf(file="https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
head(df)
sum(df[, 4])
x <- 1:1440
y <- cos(x)+0.25
y
qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Power demand (Kw)",main="Simulator load profile",xlim=c(0,1440),asp=.4)
library(ggplot2)
qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Power demand (Kw)",main="Simulator load profile",xlim=c(0,1440),asp=.4)
qplot(x,y,geom="line",xlab="Time of day (minutes)",ylab="Power demand (Kw)",main="Simulator load profile",xlim=c(0,1440),asp=.4)
x <- 1:1440
y <- -0.25 * cos(360*x)/1440) ) + 1.25
qplot(x,y,geom="line",xlab="Time of day (minutes)",ylab="Power demand (Kw)",main="Simulator load profile",xlim=c(0,1440),asp=.4)
y <- -0.25 * cos(360*x)/1440) + 1.25
qplot(x,y,geom="line",xlab="Time of day (minutes)",ylab="Power demand (Kw)",main="Simulator load profile",xlim=c(0,1440),asp=.4)
y <- (-0.25 * cos(360*x)/1440) + 1.25
qplot(x,y,geom="line",xlab="Time of day (minutes)",ylab="Power demand (Kw)",main="Simulator load profile",xlim=c(0,1440),asp=.4)
360*x
y <- (-0.25 * cos((360*x)/1440) + 1.25
qplot(x,y,geom="line",xlab="Time of day (minutes)",ylab="Power demand (Kw)",main="Simulator load profile",xlim=c(0,1440),asp=.4)
y <- (-0.25 * cos((360*x)/1440)) + 1.25
qplot(x,y,geom="line",xlab="Time of day (minutes)",ylab="Power demand (Kw)",main="Simulator load profile",xlim=c(0,1440),asp=.4)
y <- (-0.25 * cos((360*x)/1440)) + 1.25
y
x <- 1:1440
y <- (-0.25 * cos((360*x)/1440)) + 1.25
qplot(x,y,geom="line",xlab="Time of day (minutes)",ylab="Power demand (Kw)",main="Simulator load profile",xlim=c(0,1440),asp=.4)
x
360*x
360.*x
(360*x)/1440
y <- -0.25 * cos(((360*x)/1440)*(pi/180)) + 1.25
qplot(x,y,geom="line",xlab="Time of day (minutes)",ylab="Power demand (Kw)",main="Simulator load profile",xlim=c(0,1440),asp=.4)
x <- 1:1440
y <- -0.25 * cos(((360*x)/1440)*(pi/180)) + 1.25
qplot(x,y,geom="line",xlab="Time of day (minutes)",ylab="Cost per kW", main="Price function",xlim=c(0,1440),asp=.4)
x <- 1:1440
y <- -0.25 * cos(((360*x)/1440)*(pi/180)) + 1.25
qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Cost per kW", main="Price function",xlim=c(0,1440),asp=.4)
x <- 1:1440
y <- -0.25 * cos(((360*x)/1440)*(pi/180)) + 1.25
qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Cost per kW", main="Price function",xlim=c(0,1440),asp=.4)
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank())
x <- 1:1440
y <- -0.25 * cos(((360*x)/1440)*(pi/180)) + 1.25
g <- qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Cost per kW", main="Price function",xlim=c(0,1440),asp=.4)
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank())
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank(),geom_line(size=2))
?theme
x <- 1:1440
y <- -0.25 * cos(((360*x)/1440)*(pi/180)) + 1.25
g <- qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Cost per kW", main="Price function",xlim=c(0,1440),asp=.4)
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank(), linesize=element_line(size=2)))
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank(), linesize=element_line(size=2))
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank(), line=element_line(size=2))
x <- 1:1440
y <- -0.25 * cos(((360*x)/1440)*(pi/180)) + 1.25
g <- qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Cost per kW", main="Price function",xlim=c(0,1440),asp=.4)
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank(), line=element_line(size=2))
?qplot
x <- 1:1440
y <- -0.25 * cos(((360*x)/1440)*(pi/180)) + 1.25
g <- qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Cost per kW", main="Price function",xlim=c(0,1440),asp=.4,size=2)
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank())
x <- 1:1440
y <- -0.25 * cos(((360*x)/1440)*(pi/180)) + 1.25
g <- qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Cost per kW", main="Price function",xlim=c(0,1440),asp=.4)
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank())
g <- qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Cost per kW", main="Price function",xlim=c(0,1440),asp=.4,size=1)
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank())
g <- qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Cost per kW", main="Price function",xlim=c(0,1440),asp=.4,size=.5)
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank())
g <- qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Cost per kW", main="Price function",xlim=c(0,1440),asp=.4,size=.2)
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank())
g <- qplot(x,y,geom="smooth",xlab="Time of day (minutes)",ylab="Cost per kW", main="Price function",xlim=c(0,1440),asp=.4)
g+theme(axis.title.x = element_text(size=20, vjust=-.35),axis.title.y = element_text(size=20, vjust=1.35),plot.title = element_text(size=20, face="bold", vjust=2),legend.text = element_text(size=17.5),legend.title=element_blank())
fromJSON
?fromJSON
install.packages("RJSONIO")
library("RJSONIO)
library(RJSONIO)
url_string <- "http://rut.as/yourls-api.php?jsoncallback=jQuery16403626710681710392_143397…recta.com%2Frutas%2Fradial%2F33%2Fruta-11-san-bernabe.html&_=1433972199300"
trip <- fromJSON(paste(readLines(url_string), collapse = ""))
trip <- fromJSON(paste(readLines(url_string), collapse = ""))
library(ggplot2)
trainpath <- "C:/Users/t1600/Documents/kaggle/EEG/train"
trainfiles <- list.files(path=trainpath, pattern="*.csv", full.names=T, recursive=FALSE)
s1s1data <- read.csv(trainfiles[1])
s1s1events <- read.csv(trainfiles[2])
s1s1data[,1]
s1s1data[,2]
qplot(s1s1data[,2])
View(`s1s1data`)
ggplot(aes(x=row.names(s1s1data), y = Fp1), data = s1s1data)
ggplot(aes(x=row.names(s1s1data), y = Fp1), data = s1s1data) + geom_line
row.names(s1s1data)
ggplot(aes(x=as.numeric(row.names(s1s1data)), y = Fp1), data = s1s1data) + geom_line
ggplot(aes(x=as.numeric(row.names(s1s1data)), y = Fp1), data = s1s1data) + geom_line()
?fft
fftFp1 <- fft(s1s1data(Fp1))
fftFp1 <- fft(s1s1data$Fp1)
plot.frequency.spectrum(fftFp1,xlimits=c(0,acq.freq/2))
source('~/.active-rstudio-document')
plot.frequency.spectrum(fftFp1,xlimits=c(0,acq.freq/2))
source('~/.active-rstudio-document')
source('C:/Users/t1600/Documents/kaggle/EEG/EEGcomp.R')
qplot(fftFp1)
source('C:/Users/t1600/Documents/kaggle/EEG/EEGcomp.R')
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
plot.frequency.spectrum(fftFp1,xlimits=c(0,acq.freq/2))
acq.freq <- 500 # data acquisition (sample) frequency (Hz)
plot.frequency.spectrum(fftFp1,xlimits=c(0,acq.freq/2))
head(fftFp1)
View(`s1s1events`)
View(`s1s1events`)
View(`s1s1events`)
s1s1events[HandStart == 1]
s1s1events[HandStart = 1]
ggplot(aes(x=as.numeric(row.names(s1s1data)), y = Fp1), data = s1s1data) + geom_line()
View(`s1s1data`)
View(`s1s1events`)
url <- ("http://goo.gl/hYfcin")
library(RCurl)
install.packages("RCurl")
data(mtcars)
mtcars
head(mtcars)
?mtcars
head(mtcars)
?ggplot
?ggplot
library(ggplot2)
?ggplot
View(mtcars)
g <- ggplot(mtcars, aes(mpg, am))
?geom_violin
g + geom_violin()
g
g + geom_violin(scale="area")
g
g + geom_violin(scale="area")
g <- ggplot(mtcars, aes(mpg, factor(am))
g + geom_violin(scale="area")
g <- ggplot(mtcars, aes(mpg, factor(am)))
g + geom_violin(scale="area")
g + geom_boxplot
g <- ggplot(mtcars, aes(mpg, factor(am)))
g + geom_boxplot
g + geom_boxplot()
g <- ggplot(mtcars, aes(factor(am), mpg))
g + geom_boxplot()
g + geom_violin()
mtcars$am[mtcars$am == 0] <- "automatic"
mtcars$am[mtcars$am == 1] <- "manual"
View(mtcars)
g <- ggplot(mtcars, aes(factor(am), mpg))
g + geom_violin()
g + geom_plot()
g + geom_boxplot()
g + geom_boxplot() + ggtitle("Box plot for MPG vs Transmission") + xlab("Transmission type") + ylab("Miles per gallon")
View(mtcars)
library(ggplot2)
library(GGally)
#Load the dataset
data(mtcars)
mtcars
#Check the data
head(mtcars, 3)
sapply(mtcars, class)
#Change values from the Transmission (0 = automatic, 1 = manual)
mtcars$am[mtcars$am == 0] <- "automatic"
mtcars$am[mtcars$am == 1] <- "manual"
#Change factor variables
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am)
g <- ggplot(mtcars, aes(factor(am), mpg))
g + geom_boxplot(colour = "am") + ggtitle("Box plot for MPG vs Transmission") + xlab("Transmission type") + ylab("Miles per gallon")
g <- ggplot(mtcars, aes(factor(am), mpg))
g + geom_boxplot(fill = "am") + ggtitle("Box plot for MPG vs Transmission") + xlab("Transmission type") + ylab("Miles per gallon")
g <- ggplot(mtcars, aes(factor(am), mpg))
g + geom_boxplot(fill = "m) + ggtitle("Box plot for MPG vs Transmission") + xlab("Transmission type") + ylab("Miles per gallon")
g <- ggplot(mtcars, aes(factor(am), mpg))
g + geom_boxplot(aes(fill = am)) + ggtitle("Box plot for MPG vs Transmission") + xlab("Transmission type") + ylab("Miles per gallon")
data(mtcars)
mtcars
model <- lm(mpg ~ wt, data=mtcars)
model
model <- lm(mpg ~ factor(cyl) + wt, data=mtcars)
model
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
hatvalues(fit)
qplot(x,y)
plot(x,y)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
dfbetas(fit)
4168
4165
4165
4165
4186
4186
4169
4166
4158
4177
4177
4118
4134
4134
4178
4094
4094
4152
4152
4156
4156
library(rvest)
url_casas = "http://www.avisosdeocasion.com/Resultados-Inmuebles.aspx?n=VENTA-TERRENOS&PlazaBusqueda=2&Plaza=2&pagina="
part1 = url_terrenos
part2 = "&idinmueble=4" #3 para casas, 4 para terrenos
page = paste(part1, "1", part2, sep ="")
htmlpage <- read_html(page, encoding="UTF-8")
last_page <- html_nodes(htmlpage, ".cpa:nth-child(7)")
last_page <- html_text(last_page)
url_casas = "http://www.avisosdeocasion.com/Resultados-Inmuebles.aspx?n=VENTA-TERRENOS&PlazaBusqueda=2&Plaza=2&pagina="
part1 = url_terrenos
url_terrenos = "http://www.avisosdeocasion.com/Resultados-Inmuebles.aspx?n=VENTA-TERRENOS&PlazaBusqueda=2&Plaza=2&pagina="
part1 = url_terrenos
part2 = "&idinmueble=4" #3 para casas, 4 para terrenos
page = paste(part1, "1", part2, sep ="")
htmlpage <- read_html(page, encoding="UTF-8")
last_page <- html_nodes(htmlpage, ".cpa:nth-child(7)")
last_page <- html_text(last_page)
last_page <- html_nodes(htmlpage, ".cpa:nth-child(7)")
page
library(kernlab)
set.seed(1989)
control <- trainControl(method="repeatedcv", number=1, repeats=1)
sv_model <-train(cuisine ~ ., data=training[1:1000,], method="gbm")
print(sv_model)
setwd("C:/Users/t1600/Dropbox/MTY-DSE")
library(jsonlite)
train <- fromJSON("train.json", flatten = TRUE)[-1]
head(train, 1)
library(tm)
library(caret)
ingredients <- Corpus(VectorSource(train$ingredients))
ingredients
library(SnowballC)
ingredients <- tm_map(ingredients, removeNumbers)
ingredients <- tm_map(ingredients, removePunctuation)
ingredients <- tm_map(ingredients, stemDocument)
ingredients <- tm_map(ingredients, stripWhitespace)
ingredientsDTM <- DocumentTermMatrix(ingredients, control = list(weighting =
function(x)
weightTfIdf(x, normalize =
FALSE)))
ingredientsDTM
inTrain <- createDataPartition(y = ingredientsDTM$cuisine, p = 0.8, list = FALSE)
training <- ingredientsDTM[inTrain,]
testing <- ingredientsDTM[-inTrain,]
ingredientsDTM <- as.data.frame(as.matrix(sparse))
ingredientsDTM <- as.data.frame(as.matrix(ingredientsDTM))
ingredientsDTM$cuisine <- as.factor(train$cuisine)
inTrain <- createDataPartition(y = ingredientsDTM$cuisine, p = 0.8, list = FALSE)
training <- ingredientsDTM[inTrain,]
testing <- ingredientsDTM[-inTrain,]
View(training)
set.seed(1989)
cartModelFit <- rpart(cuisine ~ ., data = training, method = "class")
## Plot the tree
prp(cartModelFit)
library(rpart)
library(rpart.plot)
set.seed(1989)
cartModelFit <- rpart(cuisine ~ ., data = training, method = "class")
prp(cartModelFit)
sparse <- removeSparseTerms(ingredientsDTM, 0.999)
sparse
ingredientsDTM <- DocumentTermMatrix(ingredients, control = list(weighting =
function(x)
weightTfIdf(x, normalize =
FALSE)))
sparse <- removeSparseTerms(ingredientsDTM, 0.999)
sparse
ingredientsDTM <- as.data.frame(as.matrix(sparse))
ingredientsDTM$cuisine <- as.factor(train$cuisine)
inTrain <- createDataPartition(y = ingredientsDTM$cuisine, p = 0.8, list = FALSE)
training <- ingredientsDTM[inTrain,]
testing <- ingredientsDTM[-inTrain,]
rf_model <-train(cuisine ~ ., data=training[1:10,], method="rf")
View(training)
training$cuisine
rf_model <-train(cuisine ~ ., data=training[1:100,], method="rf")
warnings()
rf_model <-train(cuisine ~ ., data=training[1:100,], method="gbm")
rf_model <-train(cuisine ~ ., data=training[1:100,], method = "knn",
preProcess = c("center", "scale"),
tuneLength = 10,
trControl = trainControl(method = "cv"))
rf_model <-train(cuisine ~ ., data=training[1:1000,], method = "knn",
trControl = trainControl(method = "cv"))
print(rf_model)
rf_model <-train(cuisine ~ ., data=training[1:1000,], method = "svmLinear",
trControl = trainControl(method = "cv"))
print(rf_model)
print(rf_model$finalModel)
set.seed(1989)
svm_model <-train(cuisine ~ ., data=training[1:1000,], method = "svmLinear",
trControl = trainControl(method = "cv"))
print(svm_model)
svm_predict <- predict(svm_model, newdata = testing, type = "svmLinear")
svm_predict <- predict(svm_model, newdata = testing, type = "raw")
svm_predict
svm_cm <- confusionMatrix(svm_predict, testing$cuisine)
svm_cm
?predict
svm_predict <- predict(svm_model, newdata = testing, type = "raw")
svm_predict <- predict(svm_model, newdata = testing)
svm_cm <- confusionMatrix(svm_predict, testing$cuisine)
svm_cm
